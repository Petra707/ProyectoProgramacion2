

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
//javax.swing.JFrame
 package default package;

import logica.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import logica.ControladorFeria;

import javax.swing.JTextArea;

import logica.ControladorFeria;

import java.awt.BorderLayout;
import javax.swing.JPanel;

public class Pantalla extends javax.swing.JFrame{
    private ControladorFeria controlador;
    private JTextArea areaResultados;

    public Pantalla(ControladorFeria controlador) {
        this.controlador = controlador;
        configurarVentana();
        initComponentes();
    }
    public void ShowPanel(JPanel p){
        p.setSize(600, 512);
        p.setLocation(0,0);
        
        cambioM.removeAll();
        cambioM.add(p,BorderLayout.CENTER);
        cambioM.revalidate();
        cambioM.repaint();
        
    }

    private void configurarVentana() {
        setTitle("Sistema Feria de Proyectos");
        setSize(900, 650);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private void initComponentes() {
        // Panel principal
        JPanel panelPrincipal = new JPanel(new BorderLayout());

        // Barra de título
        JPanel panelTitulo = new JPanel();
        panelTitulo.setBackground(new Color(0, 102, 204));
        JLabel titulo = new JLabel("GESTIÓN DE FERIA DE PROYECTOS");
        titulo.setFont(new Font("Arial", Font.BOLD, 24));
        titulo.setForeground(Color.WHITE);
        panelTitulo.add(titulo);

        // Área de resultados
        areaResultados = new JTextArea();
        areaResultados.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(areaResultados);

        // Pestañas
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.addTab("Participantes", crearPanelParticipantes());
        tabbedPane.addTab("Jueces", crearPanelJueces());
        tabbedPane.addTab("Visitantes", crearPanelVisitantes());

        // Ensamblar
        panelPrincipal.add(panelTitulo, BorderLayout.NORTH);
        panelPrincipal.add(tabbedPane, BorderLayout.CENTER);
        panelPrincipal.add(scrollPane, BorderLayout.SOUTH);

        add(panelPrincipal);
    }

    private JPanel crearPanelParticipantes() {
        JPanel panel = new JPanel(new BorderLayout());
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));

        JButton btnRegistrar = crearBoton("Registrar", e -> registrarParticipante());
        JButton btnEliminar = crearBoton("Eliminar", e -> eliminarParticipante());
        JButton btnListar = crearBoton("Listar", e -> listarParticipantes());

        panelBotones.add(btnRegistrar);
        panelBotones.add(btnEliminar);
        panelBotones.add(btnListar);

        panel.add(panelBotones, BorderLayout.NORTH);
        return panel;
    }

    private JPanel crearPanelJueces() {
        JPanel panel = new JPanel(new BorderLayout());
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));

        JButton btnRegistrar = crearBoton("Registrar", e -> registrarJuez());
        JButton btnListar = crearBoton("Listar", e -> listarJueces());

        panelBotones.add(btnRegistrar);
        panelBotones.add(btnListar);

        panel.add(panelBotones, BorderLayout.NORTH);
        return panel;
    }

    private JPanel crearPanelVisitantes() {
        JPanel panel = new JPanel(new BorderLayout());
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));

        JButton btnRegistrar = crearBoton("Registrar", e -> registrarVisitante());
        JButton btnListar = crearBoton("Listar", e -> listarVisitantes());
        JButton btnTotal = crearBoton("Total", e -> mostrarTotalVisitantes());

        panelBotones.add(btnRegistrar);
        panelBotones.add(btnListar);
        panelBotones.add(btnTotal);

        panel.add(panelBotones, BorderLayout.NORTH);
        return panel;
    }

    private JButton crearBoton(String texto, ActionListener listener) {
        JButton boton = new JButton(texto);
        boton.setPreferredSize(new Dimension(120, 35));
        boton.setBackground(new Color(70, 130, 180));
        boton.setForeground(Color.WHITE);
        boton.setFont(new Font("Arial", Font.PLAIN, 12));
        boton.addActionListener(listener);
        return boton;
    }

    // ============ MÉTODOS PARA PARTICIPANTES ============
    private void registrarParticipante() {
        JPanel panel = new JPanel(new GridLayout(7, 2, 5, 5));
        
        // Campos del formulario...
        // Implementación similar a ejemplos anteriores
        
        int result = JOptionPane.showConfirmDialog(this, panel, "Registrar Participante", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        if (result == JOptionPane.OK_OPTION) {
            try {
                // Crear objeto Participante con los datos
                // controlador.registrarParticipante(participante);
                areaResultados.append("Participante registrado\n");
            } catch (Exception ex) {
                mostrarError(ex.getMessage());
            }
        }
    }

    private void eliminarParticipante() {
        String ci = JOptionPane.showInputDialog(this, "Ingrese CI del participante:");
        if (ci != null && !ci.isEmpty()) {
            try {
                controlador.eliminarParticipante(Integer.parseInt(ci));
                areaResultados.append("Participante eliminado\n");
            } catch (Exception ex) {
                mostrarError(ex.getMessage());
            }
        }
    }

    private void listarParticipantes() {
        areaResultados.setText("=== PARTICIPANTES ===\n\n");
        for (Participante p : controlador.obtenerParticipantes()) {
            areaResultados.append(p.getNombre() + " " + p.getPaterno() + " - CI: " + p.getCi() + "\n");
        }
    }

    // ============ MÉTODOS PARA JUECES ============
    private void registrarJuez() {
        // Implementación similar...
    }

    private void listarJueces() {
        areaResultados.setText("=== JUECES ===\n\n");
        for (Juez j : controlador.obtenerJueces()) {
            areaResultados.append(j.getNombre() + " " + j.getPaterno() + " - " + j.getGradoAcademico() + "\n");
        }
    }

    // ============ MÉTODOS PARA VISITANTES ============
    private void registrarVisitante() {
        // Implementación similar...
    }

    private void listarVisitantes() {
        areaResultados.setText("=== VISITANTES ===\n\n");
        for (Visitante v : controlador.obtenerVisitantes()) {
            areaResultados.append(v.getNombre() + " " + v.getPaterno() + " - CI: " + v.getCi() + "\n");
        }
    }

    private void mostrarTotalVisitantes() {
        areaResultados.append("Total visitantes: " + controlador.totalVisitantes() + "\n");
    }

    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
}